.btn {
  &,
  &:link,
  &:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    position: relative;
    font-size: $default-font-size;
    /* for hover and active to be animated transition must 
    be declared here on initial state*/
    transition: all .15s;
    //change for the button element on the form
    border: none;
    cursor: pointer;
  }
  &:hover,
  &:focus {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba($color-black,0.2);
    outline: none;
  }

  &:active {
    transform: translateY(-1px);
    box-shadow: 0 .5rem .5rem rgba($color-black,0.2);
  }

  &--white {
    background-color: $color-white;
    color: $color-grey-dark;
  }

  &--green {
    background-color: $color-primary;
    color: $color-white;
  }

  &::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .3s; 
  }

  &--white::after {
    background-color: $color-white;
  }

  &:hover::after {
    transform: scale(1.5);
    opacity: 0;
  }

  &--animated {
    animation: moveInBottom .75s ease-out .75s;
    /* ensures that the btn has the SAME properties as on 0% of animation even before
    the animation begins. This avoids conflicts when delay is applied for ex. */
    animation-fill-mode: backwards; 
  }
}

.btn-text {
  &:link,
  &:visited {
    font-size: $default-font-size;
    color: $color-primary;
    display: inline-block;
    text-decoration: none;
    border-bottom: 1px solid $color-primary;
    padding: 3px;
    transition: all .2s;
  }

  &:hover {
    background-color: $color-primary;
    color: $color-white;
    box-shadow: 0 1rem 2rem rgba($color-black,0.15);
    border-radius: 10px;
    transform: translateY(-1px)
  }

  &:active {
    box-shadow: 0 .5rem 1rem rgba($color-black,0.15);
    border-radius: 10px;
    transform: translateY(0)
  }
}
